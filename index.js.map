{"version":3,"file":"index.js","sources":["src/cookie_mgmt.js"],"sourcesContent":["/**\n * Cookie Management module.\n * @module @djforth/cookie_mgmt_fp\n*/\n\n/**\n * getCookie\n * Will read cookie value of passed name\n * Will return an string\n *\n * type {function}\n * @param {string} name  - Name of cookie variable.\n * @return {string} returns cookie value\n * @inner\n */\nfunction getCookie(name){\n  // no cookie set\n  if (document.cookie.length <= 0) return '';\n  // Start of required cookie\n  let st = document.cookie.indexOf(name + '=');\n  // If cookie not set\n  if (st === -1) return '';\n  // Gets value\n  st  = st + name.length + 1;\n  let end = document.cookie.indexOf(';', st);\n  end = (end === -1) ? document.cookie.length : end;\n\n  return unescape(document.cookie.substring(st, end));\n}\n\n/**\n * Sets expiry\n * Will create expiry based on number of days from today's date.\n * Will return null if nothing passed\n *\n * type {function}\n * @param {number} days  - Number of days till cookie will expire.\n * @return {string} returns expire value\n * @inner\n */\nfunction setExpires(days){\n  if (!days) return null;\n\n  let date = new Date();\n  date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n\n  return date.toGMTString();\n}\n\n/**\n * Creates Cookie Writer\n * Creates a cookie write function\n *\n * type {function}\n * @param {number} name - name of cookie\n * @param {string} path - domain path of cookie\n * @return {function} returns function to create/write cookie\n * @inner\n */\nfunction CookieWriter(name, path){\n  if (!name) return null;\n  return function(v, exp){\n    let cookie_str = `${name}=${v};`;\n    if (exp){\n      cookie_str += ` expires=${exp};`;\n    }\n    cookie_str += ` path=${path}`;\n    document.cookie = cookie_str;\n\n    return cookie_str;\n  };\n}\n\n/**\n * Create a Cookie Management\n * Will default try to read cookie of passed name\n * Will return an object\n *\n * type {function}\n * @param {string} name  - Name of cookie variable.\n * @param {string} path - Default path will default /\n * @return {object} returns object of functions\n * @name CookieManagment\n * @namespace CookieManagment\n */\nfunction CookieManagment(name, path = '/'){\n  if (name === undefined || name === null) return null;\n\n  let cookie_val = getCookie(name);\n\n  const cookieWriter = CookieWriter(name, path);\n\n  /** This will add or create a new cookie value\n    *\n    * type {function}\n    * @param {string} value - value you wish to set the cookie.\n    * @param {number} days - The number of Days till the cookie will expire\n    * @inner */\n  function createCookie(value, days){\n    cookie_val = value;\n    cookieWriter(value, setExpires(days));\n  }\n  /** This will destroy the cookie\n  * type {function}\n  * @inner */\n  function deleteCookie(){\n    cookieWriter('nil', 'Thu, 01 Jan 1970 00:00:01 GMT');\n  }\n  /** Return the value of the cookie\n  * @return {string} returns value of cookie\n  * @inner */\n  function getValue(){\n    return cookie_val;\n  }\n\n  return {\n    createCookie: createCookie\n    , deleteCookie: deleteCookie\n    , getValue: getValue\n  };\n}\n\nmodule.exports = CookieManagment;\n"],"names":["cookie","length","document","indexOf","a","b","unescape","substring","setTime","getTime","toGMTString","e","getCookie","d","CookieWriter","createCookie","c","setExpires","deleteCookie","getValue"],"mappings":"4LAeA,cAEE,GAA8B,YAAjBA,OAAOC,OAAa,MAAO,GAExC,MAASC,SAASF,OAAOG,QAAQC,EAAO,KAExC,IAAY,MAAG,MAAO,GAEtBC,EAAMA,EAAKD,EAAKH,OAAS,EACzB,MAAUC,SAASF,OAAOG,QAAQ,OAGlC,UAFgB,MAAKD,SAASF,OAAOC,SAE9BK,SAASJ,SAASF,OAAOO,gBAalC,cACE,MAAW,YAEX,MAAW,SAGX,SAFKC,QAAQH,EAAKI,UAAoB,KAAK,GAAK,GAAjB,KAExBJ,EAAKK,cAad,yBAES,cACL,kBAOA,WALEC,sBAEFA,cACAT,SAASF,YAPO,YAyBpB,yEAAsC,IACpC,YAAII,GAA+B,SAAM,YAEzC,MAAiBQ,KAEXC,EAAeC,OAyBrB,OACEC,aAlBF,cACEC,IACAH,IAAoBI,OAiBlBC,aAZJ,WACEL,EAAa,MAAO,kCAYlBM,SAPJ,WACE"}